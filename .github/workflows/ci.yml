name: BTC Stack-Builder CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - testnet
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.13'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      
      - name: Lint with ruff
        run: ruff check .
      
      - name: Check formatting with black
        run: black --check .
      
      - name: Type check with mypy
        run: mypy .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: btcstack
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: btc_stack_builder_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Install redis-cli
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U btcstack; do
            sleep 1
          done
          echo "PostgreSQL is ready."
          echo "Waiting for Redis to be ready..."
          until redis-cli -h localhost -p 6379 ping | grep PONG; do
            sleep 1
          done
          echo "Redis is ready."
      
      - name: Run tests with pytest
        env:
          BTC_STACK_BUILDER_DATABASE__HOST: localhost
          BTC_STACK_BUILDER_DATABASE__PORT: 5432
          BTC_STACK_BUILDER_DATABASE__USERNAME: btcstack
          BTC_STACK_BUILDER_DATABASE__PASSWORD: testpassword
          BTC_STACK_BUILDER_DATABASE__DATABASE: btc_stack_builder_test
          BTC_STACK_BUILDER_REDIS__HOST: localhost
          BTC_STACK_BUILDER_REDIS__PORT: 6379
          BTC_STACK_BUILDER_ENVIRONMENT: development
          BTC_STACK_BUILDER_DRY_RUN: true
        run: |
          pytest --cov=btc_stack_builder --cov-report=xml --cov-report=term
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
      
      - name: Deploy to development server
        env:
          HOST: ${{ secrets.DEV_HOST }}
          USERNAME: ${{ secrets.DEV_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEV_DEPLOY_PATH }}
        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "cd $DEPLOY_PATH && \
          docker compose pull && \
          docker compose up -d && \
          docker image prune -f"

  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'testnet' || startsWith(github.ref, 'refs/tags/v')
    environment: testnet
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.TESTNET_SSH_PRIVATE_KEY }}
      
      - name: Deploy to testnet server
        env:
          HOST: ${{ secrets.TESTNET_HOST }}
          USERNAME: ${{ secrets.TESTNET_USERNAME }}
          DEPLOY_PATH: ${{ secrets.TESTNET_DEPLOY_PATH }}
        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "cd $DEPLOY_PATH && \
          docker compose pull && \
          docker compose up -d && \
          docker image prune -f"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-testnet
    if: github.event.inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
      
      - name: Deploy to production server
        env:
          HOST: ${{ secrets.PROD_HOST }}
          USERNAME: ${{ secrets.PROD_USERNAME }}
          DEPLOY_PATH: ${{ secrets.PROD_DEPLOY_PATH }}
        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "cd $DEPLOY_PATH && \
          docker compose -f docker-compose.yml -f docker-compose.prod.yml pull && \
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d && \
          docker image prune -f"
      
      - name: Create release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
