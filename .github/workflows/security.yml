name: Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  sast-scanning:
    name: SAST Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "bandit[sarif]" semgrep

      - name: Run Bandit
        run: |
          bandit \
            -r btc_stack_builder \
            -x btc_stack_builder/tests \
            -f sarif \
            -o bandit-results.sarif \
            --exit-zero
      
      - name: Upload Bandit results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit-results.sarif
          category: bandit
      
      - name: Run Semgrep
        run: semgrep ci --sarif --output semgrep-results.sarif --config "p/python"

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.89.0
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  docker-scanning:
    name: Docker Image Scanning
    runs-on: ubuntu-latest
    needs: [sast-scanning] # Ensure build dependencies are met if Dockerfile relies on them
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Build and load Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false # Do not push the image, just build for scanning
          load: true # Load the image into the local Docker daemon
          tags: btc-stack-builder-scan:${{ github.sha }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image_ref: 'btc-stack-builder-scan:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: trivy
      
      - name: Run Dockle
        uses: goodwithtech/dockle-action@v0.4.15
        with:
          image: btc-stack-builder-scan:${{ github.sha }}
          format: sarif
          output: dockle-results.sarif
          exit-code: '1' # Fail if issues found
          exit-level: 'WARN' # Exit on warnings or higher
      
      - name: Upload Dockle scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: dockle-results.sarif
          category: dockle

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, sast-scanning, secret-scanning, docker-scanning]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate Security Report
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "## Scan completed at: $(date)" >> security-report.md
          echo "## Repository: ${{ github.repository }}" >> security-report.md
          echo "## Branch/Tag: ${{ github.ref }}" >> security-report.md
          echo "## Commit: ${{ github.sha }}" >> security-report.md
          
          echo "### Overall Workflow Status" >> security-report.md
          if [[ "${{ needs.codeql-analysis.result }}" == "success" && \
                "${{ needs.sast-scanning.result }}" == "success" && \
                "${{ needs.secret-scanning.result }}" == "success" && \
                "${{ needs.docker-scanning.result }}" == "success" ]]; then
            echo "- ✅ All security checks passed" >> security-report.md
          else
            echo "- ⚠️ Some security checks failed or were skipped. Review details below." >> security-report.md
          fi
          
          echo "### Individual Job Status:" >> security-report.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
          echo "- SAST Scanning: ${{ needs.sast-scanning.result }}" >> security-report.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-report.md
          echo "- Docker Image Scanning: ${{ needs.docker-scanning.result }}" >> security-report.md
          
          echo "### Next Steps:" >> security-report.md
          echo "1. Review detailed results in the GitHub Security tab for this workflow run." >> security-report.md
          echo "2. Address any critical or high severity findings reported by the tools." >> security-report.md
          echo "3. Update dependencies with known vulnerabilities if identified." >> security-report.md
      
      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30
