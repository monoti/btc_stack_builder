name: Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-and-quality
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"

  dependency-scanning:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          pip install -r requirements.txt
      
      - name: Scan dependencies with Safety
        run: safety check -r requirements.txt --full-report
      
      - name: Scan dependencies with pip-audit
        run: pip-audit

  sast-scanning:
    name: SAST Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep
      
      - name: Run Bandit
        run: bandit -r btc_stack_builder -x btc_stack_builder/tests -f json -o bandit-results.json
      
      - name: Upload Bandit results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-results.json
          category: bandit
      
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: p/python

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.89.0
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  docker-scanning:
    name: Docker Image Scanning
    runs-on: ubuntu-latest
    needs: [dependency-scanning, sast-scanning]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: btc-stack-builder:${{ github.sha }}
          outputs: type=docker,dest=/tmp/btc-stack-builder.tar
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/btc-stack-builder.tar
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: trivy
      
      - name: Run Dockle
        uses: goodwithtech/dockle-action@v1
        with:
          image: btc-stack-builder:${{ github.sha }}
          format: sarif
          output: dockle-results.sarif
      
      - name: Upload Dockle scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: dockle-results.sarif
          category: dockle

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scanning, sast-scanning, secret-scanning, docker-scanning]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate Security Report
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "## Scan completed at: $(date)" >> security-report.md
          echo "## Repository: ${{ github.repository }}" >> security-report.md
          echo "## Branch/Tag: ${{ github.ref }}" >> security-report.md
          echo "## Commit: ${{ github.sha }}" >> security-report.md
          echo "## Workflow Status: ${{ job.status }}" >> security-report.md
          
          echo "### Security Checks Performed:" >> security-report.md
          echo "- CodeQL Analysis" >> security-report.md
          echo "- Dependency Scanning" >> security-report.md
          echo "- SAST Scanning" >> security-report.md
          echo "- Secret Scanning" >> security-report.md
          echo "- Docker Image Scanning" >> security-report.md
          
          echo "### Next Steps:" >> security-report.md
          echo "1. Review detailed results in the GitHub Security tab" >> security-report.md
          echo "2. Address any critical or high severity findings" >> security-report.md
          echo "3. Update dependencies with known vulnerabilities" >> security-report.md
      
      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 30
